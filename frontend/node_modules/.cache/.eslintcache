[{"C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\index.js":"1","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\theme.js":"2","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\App.js":"3","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\redux\\store.js":"4","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\redux\\slices\\menus.js":"5","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\components\\index.js":"6","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\redux\\slices\\dishes.js":"7","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\redux\\slices\\auth.js":"8","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\pages\\index.js":"9","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\axios.js":"10","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\components\\TagsBlock.jsx":"11","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\components\\CommentsBlock.jsx":"12","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\pages\\Home.jsx":"13","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\pages\\FullMenu.jsx":"14","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\pages\\FullDish.jsx":"15","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\components\\SideBlock\\index.jsx":"16","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\components\\AddComment\\index.jsx":"17","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\components\\Menu\\index.jsx":"18","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\components\\Header\\index.jsx":"19","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\components\\UserInfo\\index.jsx":"20","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\pages\\Registration\\index.jsx":"21","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\components\\Dish\\index.jsx":"22","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\pages\\AddDish\\index.jsx":"23","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\pages\\Login\\index.jsx":"24","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\pages\\AddMenu\\index.jsx":"25","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\components\\Menu\\Skeleton.jsx":"26"},{"size":734,"mtime":1706955660719,"results":"27","hashOfConfig":"28"},{"size":715,"mtime":1706955660735,"results":"29","hashOfConfig":"28"},{"size":1594,"mtime":1706955660703,"results":"30","hashOfConfig":"28"},{"size":360,"mtime":1706955660735,"results":"31","hashOfConfig":"28"},{"size":3029,"mtime":1706955660734,"results":"32","hashOfConfig":"28"},{"size":231,"mtime":1706955660719,"results":"33","hashOfConfig":"28"},{"size":1567,"mtime":1706955660734,"results":"34","hashOfConfig":"28"},{"size":2251,"mtime":1706955660733,"results":"35","hashOfConfig":"28"},{"size":269,"mtime":1706955660732,"results":"36","hashOfConfig":"28"},{"size":286,"mtime":1706955660703,"results":"37","hashOfConfig":"28"},{"size":1220,"mtime":1706977115432,"results":"38","hashOfConfig":"28"},{"size":1647,"mtime":1706980092431,"results":"39","hashOfConfig":"28"},{"size":4255,"mtime":1706978497340,"results":"40","hashOfConfig":"28"},{"size":2326,"mtime":1706976013932,"results":"41","hashOfConfig":"28"},{"size":1490,"mtime":1706973977314,"results":"42","hashOfConfig":"28"},{"size":427,"mtime":1706955660716,"results":"43","hashOfConfig":"28"},{"size":817,"mtime":1706975808145,"results":"44","hashOfConfig":"28"},{"size":4786,"mtime":1706955660715,"results":"45","hashOfConfig":"28"},{"size":1838,"mtime":1706976988715,"results":"46","hashOfConfig":"28"},{"size":496,"mtime":1706955660718,"results":"47","hashOfConfig":"28"},{"size":3061,"mtime":1706973809372,"results":"48","hashOfConfig":"28"},{"size":4257,"mtime":1706955660711,"results":"49","hashOfConfig":"28"},{"size":6013,"mtime":1706955660723,"results":"50","hashOfConfig":"28"},{"size":2542,"mtime":1706970437902,"results":"51","hashOfConfig":"28"},{"size":6140,"mtime":1706955660726,"results":"52","hashOfConfig":"28"},{"size":1301,"mtime":1706979375066,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},"b1rfhj",{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"57"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"57"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"57"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"57"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"57"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"57"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"57"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"57"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"57"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\index.js",[],[],[],"C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\theme.js",[],[],"C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\App.js",["142","143","144"],[],"import {Routes, Route} from 'react-router-dom';\r\nimport Container from \"@mui/material/Container\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\n\r\nimport {Header} from \"./components\";\r\nimport {Home, FullMenu, Registration, AddDish, AddMenu, Login, FullDish} from \"./pages\";\r\nimport React from 'react';\r\nimport {logout, selectIsAuth} from \"./redux/slices/auth\";\r\nimport {fetchAuthMe} from \"./redux/slices/auth\";\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch();\r\n    const isAuth = useSelector(selectIsAuth);\r\n\r\n    React.useEffect(() => {\r\n        dispatch(fetchAuthMe())\r\n    }, [])\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Container maxWidth=\"lg\">\r\n                <Routes>\r\n                    <Route path=\"/\" element={<Home/>}/>\r\n                    <Route path=\"/menu/:id\" element={<FullMenu/>}/>\r\n                    <Route path=\"/menu/:id/edit\" element={<AddMenu/>}/>\r\n                    <Route path=\"/dish/:id\" element={<FullDish/>}/>\r\n                    <Route path=\"/dish/:id/edit\" element={<AddDish/>}/>\r\n                    <Route path=\"/add-dish\" element={<AddDish/>}/>\r\n                    <Route path=\"/add-menu\" element={<AddMenu/>}/>\r\n                    <Route path=\"/login\" element={<Login/>}/>\r\n                    <Route path=\"/register\" element={<Registration/>}/>\r\n\r\n                    {/*<FullPost />*/}\r\n                    {/*<AddMenu />*/}\r\n                    {/*<Login />*/}\r\n                    {/*<Registration />*/}\r\n                </Routes>\r\n\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\redux\\store.js",[],[],"C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\redux\\slices\\menus.js",["145"],[],"import {createSlice, createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport axios from \"../../axios\";\r\n\r\nexport const fetchMenu = createAsyncThunk('menus/fetchMenu', async () => {\r\n    const {data} = await axios.get('/menu');\r\n    return data;\r\n});\r\n\r\nexport const fetchRemoveMenu = createAsyncThunk('menus/fetchRemoveMenu', async (id) =>\r\n    axios.delete(`/menu/${id}`)\r\n);\r\n\r\nexport const fetchUpdateMenu = createAsyncThunk('menus/fetchUpdateMenu', async ({ menuId, id, flag }) => {\r\n    const response = await axios.patch(`/menu/${menuId}`, flag);\r\n    return { menuId };\r\n});\r\n\r\nexport const transferDishes = createAsyncThunk('menus/transferDishes', async ({ sourceMenuId, targetMenuId, dishIds }) => {\r\n    const response = await axios.post('/transfer-dishes', { sourceMenuId, targetMenuId, dishIds });\r\n    return response.data;\r\n});\r\n\r\nconst initialState = {\r\n    menus: {\r\n        items: [],\r\n        status: 'loading'\r\n    }\r\n};\r\n\r\nconst menusSlice = createSlice({\r\n    name: 'menus',\r\n    initialState,\r\n    reducer: {},\r\n    extraReducers: {\r\n        // Получение меню\r\n        [fetchMenu.pending]: (state) => {\r\n            state.menus.status = 'loading';\r\n        },\r\n        [fetchMenu.fulfilled]: (state, action) => {\r\n            state.menus.items = action.payload;\r\n            state.menus.status = 'loaded';\r\n        },\r\n        [fetchMenu.rejected]: (state) => {\r\n            state.menus.items = [];\r\n            state.menus.status = 'error';\r\n        },\r\n\r\n        // Удаление меню\r\n        [fetchRemoveMenu.pending]: (state, action) => {\r\n            state.menus.items = state.menus.items.filter(obj => obj._id !== action.meta.arg);\r\n        },\r\n\r\n\r\n\r\n\r\n\r\n        //Обновление меню\r\n        [fetchUpdateMenu.pending]: (state) => {\r\n            state.menus.status = 'loading';\r\n        },\r\n        [fetchUpdateMenu.fulfilled]: (state, action) => {\r\n            const updatedMenuId = action.meta.arg.menuId;\r\n            const updatedDishId = action.meta.arg.id;\r\n\r\n            const index = state.menus.items.findIndex(menu => menu._id === updatedMenuId);\r\n\r\n            if (index !== -1) {\r\n                // Используем map для обновления массива dishes\r\n                state.menus.items[index] = {\r\n                    ...state.menus.items[index],\r\n                    dishes: state.menus.items[index].dishes.filter(dish => dish._id !== updatedDishId),\r\n                };\r\n            }\r\n\r\n            state.menus.status = 'loaded';\r\n        },\r\n\r\n\r\n        [transferDishes.pending]: (state) => {\r\n            state.menus.status = 'loading';\r\n        },\r\n        [transferDishes.fulfilled]: (state, action) => {\r\n            // Handle the successful transfer if needed\r\n            state.menus.status = 'loaded';\r\n        },\r\n        [transferDishes.rejected]: (state) => {\r\n            // Handle the error if needed\r\n            state.menus.status = 'error';\r\n        },\r\n\r\n\r\n    },\r\n});\r\n\r\nexport const menuReducer = menusSlice.reducer;","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\components\\index.js",[],[],"C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\redux\\slices\\dishes.js",["146"],[],"import {createSlice, createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport axios from \"../../axios\";\r\n\r\nexport const fetchDishes = createAsyncThunk('dishes/fetchDishes', async () => {\r\n    const {data} = await axios.get('/dishes');\r\n    return data;\r\n});\r\n\r\nexport const fetchRemoveDish = createAsyncThunk('dishes/fetchRemoveDish', async (id) => {\r\n    const response = await axios.delete(`/dishes/${id}`)\r\n    return {id};\r\n});\r\n\r\n// export const fetchUpdateMenu = createAsyncThunk('dishes/fetchUpdateMenu', async ({ id, flag }) => {\r\n//     const response = await axios.patch(`/menu/${id}`, flag);\r\n//     return { id };\r\n// });\r\n\r\nconst initialState = {\r\n    dishes: {\r\n        items: [],\r\n        status: 'loading'\r\n    },\r\n};\r\n\r\nconst dishesSlice = createSlice({\r\n    name: 'dishes',\r\n    initialState,\r\n    reducer: {},\r\n    extraReducers: {\r\n        // Получение блюд\r\n        [fetchDishes.pending]: (state) => {\r\n            state.dishes.status = 'loading';\r\n        },\r\n        [fetchDishes.fulfilled]: (state, action) => {\r\n            state.dishes.items = action.payload;\r\n            state.dishes.status = 'loaded';\r\n        },\r\n        [fetchDishes.rejected]: (state) => {\r\n            state.dishes.items = [];\r\n            state.dishes.status = 'error';\r\n        },\r\n\r\n        // Удаление блюд\r\n        [fetchRemoveDish.pending]: (state, action) => {\r\n            state.dishes.items = state.dishes.items.filter(obj => obj._id !== action.meta.arg);\r\n        },\r\n\r\n\r\n\r\n    },\r\n});\r\n\r\nexport const dishesReducer = dishesSlice.reducer;","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\redux\\slices\\auth.js",[],[],"C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\pages\\index.js",[],[],"C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\axios.js",[],[],"C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\components\\TagsBlock.jsx",[],[],"C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\components\\CommentsBlock.jsx",[],[],"C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\pages\\Home.jsx",["147","148","149","150","151"],[],"C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\pages\\FullMenu.jsx",["152"],[],"C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\pages\\FullDish.jsx",[],[],"C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\components\\SideBlock\\index.jsx",[],[],"C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\components\\AddComment\\index.jsx",[],[],"C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\components\\Menu\\index.jsx",["153","154","155","156","157","158","159"],[],"// Menu.jsx\r\nimport React, {useEffect} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport clsx from 'clsx';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@mui/icons-material/Clear';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport { List, ListItem, ListItemText, ListItemAvatar, Avatar, Typography } from '@mui/material';\r\n\r\nimport styles from './Menu.module.scss';\r\nimport { UserInfo } from '../UserInfo';\r\nimport { MenuSkeleton } from './Skeleton';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { fetchRemoveMenu } from \"../../redux/slices/menus\";\r\nimport { Dish } from \"../Dish\";\r\nimport axios from \"../../axios\";\r\n\r\nexport const Menu = ({\r\n                         id,\r\n                         day,\r\n                         option,\r\n                         createdAt,\r\n                         user,\r\n                         dishes,\r\n                         isFullMenu,\r\n                         isLoading,\r\n                         isEditable,\r\n                         userData,\r\n                     }) => {\r\n    const dispatch = useDispatch();\r\n    if (isLoading) {\r\n        return <MenuSkeleton/>;\r\n    }\r\n\r\n    const onClickRemove = () => {\r\n        if (window.confirm('Вы действительно хотите удалить меню?')) {\r\n            dispatch(fetchRemoveMenu(id));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={clsx(styles.root, { [styles.rootFull]: isFullMenu })}>\r\n\r\n            {isEditable && (\r\n                <div className={styles.editButtons}>\r\n                    <Link to={`/menu/${id}/edit`}>\r\n                        <IconButton color=\"primary\">\r\n                            <EditIcon />\r\n                        </IconButton>\r\n                    </Link>\r\n                    <IconButton onClick={onClickRemove} color=\"secondary\">\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </div>\r\n            )}\r\n            <div className={styles.wrapper}>\r\n                <UserInfo {...user} additionalText={createdAt} />\r\n                <div className={styles.indention}>\r\n                    <h2 className={clsx(styles.day, { [styles.dayFull]: isFullMenu })}>\r\n                        {isFullMenu ? (\r\n                            <>{day} - {option}</>\r\n                        ) : (\r\n                            <Link to={`/menu/${id}`}>\r\n                                {day} - №{option}\r\n                            </Link>\r\n                        )}\r\n                    </h2>\r\n                    {dishes && (\r\n                        <List sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}>\r\n                            {dishes.map((dish, index) => (\r\n                                // console.log(JSON.stringify({\r\n                                //     day,\r\n                                //     dishes: dishes.filter((d, i) => i !== index).map((d) => d._id),\r\n                                //     option,\r\n                                // }))\r\n                                // console.log({\r\n                                //     day,\r\n                                //     dishes: dishes.filter((d, i) => i !== index).map((d) => d._id),\r\n                                //     option,\r\n                                // })\r\n                                <Dish\r\n                                    key={dish._id}\r\n                                    id={dish._id}\r\n                                    name={dish.name}\r\n                                    user={dish.user}\r\n                                    menuId={id}\r\n                                    type={dish.typeId.name}\r\n                                    avatarUrl={dish.avatarUrl}\r\n                                    isLoading={false}\r\n                                    isEditable={userData?._id === user?._id}\r\n                                    // flag={JSON.stringify({\r\n                                    //     day,\r\n                                    //     dishes: dishes.filter((d, i) => i !== index).map((d) => d._id),\r\n                                    //     option,\r\n                                    // })}\r\n                                    flag={{\r\n                                        day,\r\n                                        dishes: dishes.filter((d, i) => i !== index).map((d) => d._id),\r\n                                        option,\r\n                                    }}\r\n                                    // flag={JSON.stringify(dishes.filter((d, i) => i !== index))}\r\n                                />\r\n                            ))}\r\n                        </List>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\components\\Header\\index.jsx",[],[],"C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\components\\UserInfo\\index.jsx",[],[],"C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\pages\\Registration\\index.jsx",["160"],[],"import React from 'react';\r\nimport Typography from '@mui/material/Typography';\r\nimport TextField from '@mui/material/TextField';\r\nimport Paper from '@mui/material/Paper';\r\nimport Button from '@mui/material/Button';\r\nimport Avatar from '@mui/material/Avatar';\r\n\r\nimport styles from './Login.module.scss';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {fetchRegister, selectIsAuth} from \"../../redux/slices/auth\"; //fetchRegister\r\nimport {useForm} from \"react-hook-form\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nexport const Registration = () => {\r\n    const isAuth = useSelector(selectIsAuth);\r\n    const dispatch = useDispatch();\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        setError,\r\n        formState: {errors, isValid}\r\n    } = useForm({\r\n        defaultValues: {\r\n\r\n        },\r\n        mode: 'onChange'\r\n    })\r\n\r\n    const onSubmit = async (values) => {\r\n        const data = await dispatch(fetchRegister(values));\r\n        if (!data.payload) {\r\n            return alert('Не удалось зарегистрироваться .')\r\n        } else {\r\n            if ('token' in data.payload) {\r\n                window.localStorage.setItem('token', data.payload.token);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Navigate to=\"/\"/>\r\n    }\r\n\r\n    return (\r\n        <Paper classes={{root: styles.root}}>\r\n            <Typography classes={{root: styles.title}} variant=\"h5\">\r\n                Создание аккаунта\r\n            </Typography>\r\n            <div className={styles.avatar}>\r\n                <Avatar sx={{width: 100, height: 100}}/>\r\n            </div>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <TextField\r\n                    className={styles.field}\r\n                    label=\"Полное имя\"\r\n                    error={Boolean(errors.fullName?.message)}\r\n                    helperText={errors.fullName?.message}\r\n                    {...register('fullName', {required: 'Укажите полное имя'})}\r\n                    fullWidth\r\n                /><TextField\r\n                className={styles.field}\r\n                label=\"E-Mail\"\r\n                type=\"email\"\r\n                error={Boolean(errors.email?.message)}\r\n                helperText={errors.email?.message}\r\n                {...register('email', {required: 'Укажите почту'})}\r\n                fullWidth\r\n            /><TextField\r\n                className={styles.field}\r\n                label=\"Пароль\"\r\n                type=\"password\"\r\n                error={Boolean(errors.password?.message)}\r\n                helperText={errors.password?.message}\r\n                {...register('password', {required: 'Укажите пароль'})}\r\n                fullWidth\r\n            />\r\n                <Button disabled={!isValid} type=\"submit\" size=\"large\" variant=\"contained\" fullWidth>\r\n                    Зарегистрировать аккаунт\r\n                </Button>\r\n            </form>\r\n        </Paper>\r\n    );\r\n};\r\n","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\components\\Dish\\index.jsx",["161","162"],[],"// Dish.jsx\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { ListItem, ListItemAvatar, Avatar, ListItemText, Typography, Divider } from '@mui/material';\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport DeleteIcon from \"@mui/icons-material/Clear\";\r\nimport { fetchRemoveDish } from \"../../redux/slices/dishes\";\r\nimport {fetchUpdateMenu} from \"../../redux/slices/menus\"\r\nimport clsx from \"clsx\";\r\nimport styles from \"../Menu/Menu.module.scss\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {MenuSkeleton} from \"../Menu/Skeleton\";\r\nimport {UserInfo} from \"../UserInfo\";\r\n\r\nexport const Dish = (\r\n    {\r\n        id,\r\n        name,\r\n        type,\r\n        menuId,\r\n        user,\r\n        createdAt,\r\n        avatarUrl,\r\n        isLoading,\r\n        isEditable,\r\n        flag\r\n    }) => {\r\n    const dispatch = useDispatch();\r\n    if (isLoading) {\r\n        return <MenuSkeleton/>;\r\n    }\r\n    const onClickRemove = () => {\r\n        if (window.confirm('Вы действительно хотите удалить блюдо?')) {\r\n            if(!flag) {\r\n                dispatch(fetchRemoveDish(id));\r\n            } else {\r\n                dispatch(fetchUpdateMenu({ menuId: menuId, id: id, flag: flag }));\r\n            }\r\n            // Вместо fetchRemoveMenu используем fetchRemoveDish\r\n            // Обратите внимание, что передаем id блюда, а не меню\r\n\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={clsx(styles.root)}>\r\n            {isLoading ? (\r\n                <div>Loading dish...</div>\r\n            ) : (\r\n                <>\r\n                    {isEditable && (\r\n                        <div className={styles.editButtons}>\r\n                            <Link to={`/dish/${id}/edit`}>\r\n                                <IconButton color=\"primary\">\r\n                                    <EditIcon/>\r\n                                </IconButton>\r\n                            </Link>\r\n                            <IconButton onClick={onClickRemove} color=\"secondary\">\r\n                                <DeleteIcon/>\r\n                            </IconButton>\r\n                        </div>\r\n                    )}\r\n                    <div className={styles.wrapper}>\r\n                        {/*<UserInfo {...user} additionalText={createdAt}/>*/}\r\n                        <div className={styles.indention}>\r\n                            <h2 className={clsx(styles.day)}>\r\n                                <Link to={`/dish/${id}`}>\r\n                                    {type}\r\n                                </Link>\r\n                            </h2>\r\n\r\n                            <React.Fragment key={id}>\r\n                                <ListItem alignItems=\"flex-start\">\r\n                                    <ListItemAvatar>\r\n                                        <Avatar alt={type} src={`http://localhost:4444${avatarUrl}`}/>\r\n                                    </ListItemAvatar>\r\n                                    <ListItemText\r\n                                        primary={`${name}`} //name\r\n                                        secondary={\r\n                                            <React.Fragment>\r\n                                                <Typography\r\n                                                    sx={{display: 'inline'}}\r\n                                                    component=\"span\"\r\n                                                    variant=\"body2\"\r\n                                                    color=\"text.primary\"\r\n                                                >\r\n                                                    {type}\r\n                                                </Typography>\r\n                                            </React.Fragment>\r\n                                        }\r\n                                    />\r\n                                </ListItem>\r\n                                {/*<Divider variant=\"inset\" component=\"li\"/>*/}\r\n                            </React.Fragment>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\pages\\AddDish\\index.jsx",["163","164"],[],"import React, { useState, useEffect } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport Paper from '@mui/material/Paper';\r\nimport Button from '@mui/material/Button';\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport axios from '../../axios';\r\n\r\nimport styles from './AddDish.module.scss';\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectIsAuth} from \"../../redux/slices/auth\";\r\nimport {Navigate, useNavigate, useParams} from \"react-router-dom\";\r\n\r\nexport const AddDish = () => {\r\n    const {id} = useParams();\r\n    const isAuth = useSelector(selectIsAuth);\r\n    const [name, setName] = useState('');\r\n    const [typeId, setTypeId] = useState('');\r\n    const [image, setImage] = useState(null);\r\n    const [imagePreview, setImagePreview] = useState('');\r\n    const [typeList, setTypeList] = useState([]);\r\n    const navigate = useNavigate();\r\n\r\n    const isEditing = Boolean(id);\r\n    useEffect(() => {\r\n        // Получение списка типов блюд с сервера\r\n        axios.get('/types').then((response) => {\r\n            setTypeList(response.data);\r\n        });\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if(id) {\r\n            axios.get(`/dishes/${id}`).then(({data}) => {\r\n                setName(data.name);\r\n                setImage(`http://localhost:4444${data.avatarUrl}`);\r\n                setTypeId(data.typeId._id);\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    const handleImageChange = (e) => {\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            setImage(file);\r\n            setImagePreview(URL.createObjectURL(file));\r\n        }\r\n    };\r\n\r\n    const handleCreateDish = async () => {\r\n        try {\r\n            if (!name || !typeId) {\r\n                alert('Укажите наименование блюда и тип блюда');\r\n                return;\r\n            }\r\n\r\n            let avatarUrl = null;\r\n\r\n            // Если есть изображение, загружаем его на сервер и получаем URL\r\n            if (image) {\r\n                const formData = new FormData();\r\n                formData.append('image', image);\r\n\r\n                // Отправляем изображение на сервер\r\n                const imageResponse = await axios.post('/upload', formData, {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data',\r\n                    },\r\n                });\r\n\r\n                // Получаем URL изображения из ответа сервера\r\n                avatarUrl = imageResponse.data.url;\r\n            }\r\n\r\n            // Формируем данные для запроса создания блюда\r\n            const requestData = {\r\n                name: name,\r\n                typeId: typeId,\r\n                avatarUrl: avatarUrl,\r\n            };\r\n\r\n            const {data} = isEditing\r\n                ? await axios.patch(`/dishes/${id}`, requestData)\r\n                : await axios.post('/dishes', requestData);\r\n\r\n            const _id = isEditing ? id : data._id;\r\n            navigate(`/dish/${_id}`)\r\n\r\n            // Отправка данных на сервер для создания блюда\r\n            // const response = await axios.post('/dishes', requestData);\r\n            //\r\n            //\r\n            // console.log('Блюдо успешно создано:', response.data);\r\n            // setName('');\r\n            // setTypeId('');\r\n            // setImage(null);\r\n            // setImagePreview('');\r\n            // const fileInput = document.getElementById('imageInput');\r\n            // if (fileInput) {\r\n            //     fileInput.value = '';\r\n            // }\r\n        } catch (error) {\r\n            console.error('Ошибка при создании блюда:', error);\r\n            if (error.response) {\r\n                console.error('Ответ сервера:', error.response.data);\r\n            }\r\n            alert(error.response.data.message)\r\n\r\n        }\r\n    };\r\n\r\n\r\n    if(!window.localStorage.getItem('token') && !isAuth) {\r\n        return <Navigate to=\"/\" />\r\n    }\r\n\r\n    return (\r\n        <Paper style={{ padding: 30 }}>\r\n            <TextField\r\n                classes={{ root: styles.title }}\r\n                variant=\"standard\"\r\n                placeholder=\"Название блюда...\"\r\n                fullWidth\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n            />\r\n            {/* Выбор типа блюда */}\r\n            <Select style={{ marginBottom: 15 }}\r\n                value={typeId}\r\n                onChange={(e) => setTypeId(e.target.value)}\r\n                displayEmpty\r\n                fullWidth\r\n            >\r\n                <MenuItem value=\"\" disabled>\r\n                    Выберите тип блюда\r\n                </MenuItem>\r\n                {typeList.map((type) => (\r\n                    <MenuItem key={type.id} value={type._id}>\r\n                        {type.name}\r\n                    </MenuItem>\r\n                ))}\r\n            </Select>\r\n            {/* Загрузка изображения блюда */}\r\n            <input style={{ marginBottom: 15 }}\r\n                type=\"file\"\r\n                onChange={handleImageChange}\r\n                id=\"imageInput\"  // Добавленный идентификатор для элемента input\r\n            />\r\n            {imagePreview && <img src={imagePreview} alt=\"Image Preview\" />}\r\n            <div className={styles.buttons}>\r\n                <Button size=\"large\" variant=\"contained\" onClick={handleCreateDish}>\r\n                    {isEditing ? 'Сохранить' : 'Создать блюдо'}\r\n                </Button>\r\n                <a href=\"/\">\r\n                    <Button size=\"large\">Отмена</Button>\r\n                </a>\r\n            </div>\r\n        </Paper>\r\n    );\r\n};\r\n","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\pages\\Login\\index.jsx",["165"],[],"import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {useForm} from 'react-hook-form';\r\n\r\nimport styles from \"./Login.module.scss\";\r\nimport {fetchAuth, selectIsAuth} from \"../../redux/slices/auth\";\r\n\r\n\r\nexport const Login = () => {\r\n    const isAuth = useSelector(selectIsAuth);\r\n    const dispatch = useDispatch();\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        setError,\r\n        formState: {errors, isValid}\r\n    } = useForm({\r\n        defaultValues: {// УБРАТЬ!!!!!!\r\n\r\n        },\r\n        mode: 'onChange'\r\n\r\n    })\r\n\r\n    const onSubmit = async (values) => {\r\n        const data = await dispatch(fetchAuth(values));\r\n        if (!data.payload) {\r\n            return alert('Не удалось авторизоваться')\r\n        } else {\r\n            if('token' in data.payload){\r\n                window.localStorage.setItem('token', data.payload.token);\r\n            }\r\n        }\r\n    }\r\n\r\n    if(isAuth) {\r\n        return <Navigate to=\"/\"/>\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Paper classes={{root: styles.root}}>\r\n            <Typography classes={{root: styles.title}} variant=\"h5\">\r\n                Вход в аккаунт\r\n            </Typography>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <TextField\r\n                    className={styles.field}\r\n                    label=\"E-Mail\"\r\n                    type=\"email\"\r\n                    error={Boolean(errors.email?.message)}\r\n                    helperText={errors.email?.message}\r\n                    {...register('email', {required: 'Укажите почту'})}\r\n                    fullWidth\r\n                />\r\n                <TextField\r\n                    className={styles.field}\r\n                    label=\"Пароль\"\r\n                    type=\"password\"\r\n                    error={Boolean(errors.password?.message)}\r\n                    helperText={errors.password?.message}\r\n                    {...register('password', {required: 'Укажите пароль'})}\r\n                    fullWidth\r\n                />\r\n                <Button disabled={!isValid} type=\"submit\" size=\"large\" variant=\"contained\" fullWidth>\r\n                    Войти\r\n                </Button>\r\n            </form>\r\n        </Paper>\r\n    );\r\n};\r\n","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\pages\\AddMenu\\index.jsx",["166","167","168","169"],[],"import React, { useState, useEffect } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport Paper from '@mui/material/Paper';\r\nimport Button from '@mui/material/Button';\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport axios from '../../axios';\r\n\r\nimport styles from './AddMenu.module.scss';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectIsAuth } from '../../redux/slices/auth';\r\nimport { useNavigate, Navigate, useParams } from 'react-router-dom';\r\n\r\nexport const AddMenu = () => {\r\n    const {id} = useParams();\r\n    const isAuth = useSelector(selectIsAuth);\r\n    const [day, setDay] = useState('');\r\n    const [dishes, setDishes] = useState([]);\r\n    const [selectedDish, setSelectedDish] = useState('');\r\n    const [existingDishes, setExistingDishes] = useState([]);\r\n    const [option, setOption] = useState('');\r\n    const [error, setError] = useState('');\r\n    const [createdMenu, setCreatedMenu] = useState(null);\r\n    const navigate = useNavigate();\r\n\r\n    const isEditing = Boolean(id);\r\n\r\n    useEffect(() => {\r\n        // Получение списка существующих блюд с сервера\r\n        axios.get('/dishes').then((response) => {\r\n            setExistingDishes(response.data);\r\n        });\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if(id) {\r\n            axios.get(`/menu/${id}`).then(({data}) => {\r\n                setDay(data.day);\r\n                setDishes(data.dishes);\r\n                setOption(data.option);\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    const handleAddDish = async () => {\r\n        try {\r\n            if (!selectedDish) {\r\n                alert('Выберите блюдо');\r\n                return;\r\n            }\r\n\r\n            // Получение информации о выбранном блюде\r\n            const response = await axios.get(`/dishes/${selectedDish}`);\r\n            const dishInfo = response.data;\r\n\r\n            // Добавление выбранного блюда в список блюд меню\r\n            setDishes((prevDishes) => [...prevDishes, dishInfo]);\r\n            // Сброс выбранного блюда\r\n            setSelectedDish('');\r\n        } catch (error) {\r\n            console.error('Ошибка при получении информации о блюде:', error);\r\n            // Обработка ошибки, например, вывод сообщения пользователю\r\n            setError('Ошибка при получении информации о блюде');\r\n        }\r\n    };\r\n\r\n    const handleRemoveDish = (dishId) => {\r\n        setDishes((prevDishes) => prevDishes.filter((dish) => dish._id !== dishId));\r\n    };\r\n\r\n    const handleCreateMenu = async () => {\r\n        try {\r\n            if (dishes.length === 0) {\r\n                alert('Добавьте блюда в меню');\r\n                return;\r\n            }\r\n            const fields = {\r\n                day,\r\n                dishes,\r\n                option,\r\n            };\r\n\r\n            const {data} = isEditing\r\n                ? await axios.patch(`/menu/${id}`, fields)\r\n                : await axios.post('/menu', fields);\r\n\r\n            const _id = isEditing ? id : data._id;\r\n            navigate(`/menu/${_id}`)\r\n\r\n            // Дополнительные действия, например, перенаправление на страницу с созданным меню\r\n        } catch (error) {\r\n            console.error('Ошибка при создании меню:', error);\r\n            alert(error.data?.message || 'Ошибка при создании меню');\r\n        }\r\n    };\r\n\r\n    if (!window.localStorage.getItem('token') && !isAuth) {\r\n        return <Navigate to=\"/\" />;\r\n    }\r\n\r\n\r\n    return (\r\n        <Paper style={{ padding: 30 }}>\r\n            <TextField\r\n                classes={{ root: styles.title }}\r\n                variant=\"standard\"\r\n                placeholder=\"Название меню...\"\r\n                fullWidth\r\n                value={day}\r\n                onChange={(e) => setDay(e.target.value)}\r\n            />\r\n\r\n            <Select\r\n                value={selectedDish}\r\n                onChange={(e) => setSelectedDish(e.target.value)}\r\n                displayEmpty\r\n                fullWidth\r\n                classes={{ root: styles.select }}\r\n            >\r\n                <MenuItem value=\"\" disabled>\r\n                    Выберите блюдо\r\n                </MenuItem>\r\n                {existingDishes.map((dish) => (\r\n                    <MenuItem key={dish._id} value={dish._id}>\r\n                        {dish.name}\r\n                    </MenuItem>\r\n                ))}\r\n            </Select>\r\n\r\n            <Button variant=\"outlined\" size=\"large\" onClick={handleAddDish}>\r\n                Добавить блюдо\r\n            </Button>\r\n\r\n            <div className={styles.dishesContainer}>\r\n                <p>Выбранные блюда:</p>\r\n                <ul>\r\n                    {dishes.map((dishInfo) => (\r\n                        <li key={dishInfo._id}>\r\n                            {dishInfo.name}\r\n                            <Button onClick={() => handleRemoveDish(dishInfo._id)}>Удалить</Button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n            <TextField\r\n                classes={{ root: styles.title }}\r\n                variant=\"standard\"\r\n                placeholder=\"Вариант...\"\r\n                fullWidth\r\n                value={option}\r\n                onChange={(e) => setOption(e.target.value)}\r\n            />\r\n\r\n            <div className={styles.buttons}>\r\n                <Button size=\"large\" variant=\"contained\" onClick={handleCreateMenu}>\r\n                    {isEditing ? 'Сохранить' : 'Создать меню'}\r\n                </Button>\r\n                <a href=\"/\">\r\n                    <Button size=\"large\">Отмена</Button>\r\n                </a>\r\n            </div>\r\n\r\n        </Paper>\r\n    );\r\n};\r\n","C:\\Users\\admin\\PycharmProjects\\dz_trvp\\trvp_dz\\frontend\\src\\components\\Menu\\Skeleton.jsx",[],[],{"ruleId":"170","severity":1,"message":"171","line":9,"column":9,"nodeType":"172","messageId":"173","endLine":9,"endColumn":15},{"ruleId":"170","severity":1,"message":"174","line":14,"column":11,"nodeType":"172","messageId":"173","endLine":14,"endColumn":17},{"ruleId":"175","severity":1,"message":"176","line":18,"column":8,"nodeType":"177","endLine":18,"endColumn":10,"suggestions":"178"},{"ruleId":"170","severity":1,"message":"179","line":14,"column":11,"nodeType":"172","messageId":"173","endLine":14,"endColumn":19},{"ruleId":"170","severity":1,"message":"179","line":10,"column":11,"nodeType":"172","messageId":"173","endLine":10,"endColumn":19},{"ruleId":"170","severity":1,"message":"180","line":4,"column":8,"nodeType":"172","messageId":"173","endLine":4,"endColumn":12},{"ruleId":"170","severity":1,"message":"181","line":5,"column":8,"nodeType":"172","messageId":"173","endLine":5,"endColumn":11},{"ruleId":"170","severity":1,"message":"182","line":10,"column":10,"nodeType":"172","messageId":"173","endLine":10,"endColumn":19},{"ruleId":"170","severity":1,"message":"183","line":11,"column":10,"nodeType":"172","messageId":"173","endLine":11,"endColumn":23},{"ruleId":"170","severity":1,"message":"184","line":37,"column":11,"nodeType":"172","messageId":"173","endLine":37,"endColumn":36},{"ruleId":"175","severity":1,"message":"185","line":29,"column":8,"nodeType":"177","endLine":29,"endColumn":10,"suggestions":"186"},{"ruleId":"170","severity":1,"message":"187","line":2,"column":16,"nodeType":"172","messageId":"173","endLine":2,"endColumn":25},{"ruleId":"170","severity":1,"message":"188","line":8,"column":16,"nodeType":"172","messageId":"173","endLine":8,"endColumn":24},{"ruleId":"170","severity":1,"message":"189","line":8,"column":26,"nodeType":"172","messageId":"173","endLine":8,"endColumn":38},{"ruleId":"170","severity":1,"message":"190","line":8,"column":40,"nodeType":"172","messageId":"173","endLine":8,"endColumn":54},{"ruleId":"170","severity":1,"message":"191","line":8,"column":56,"nodeType":"172","messageId":"173","endLine":8,"endColumn":62},{"ruleId":"170","severity":1,"message":"192","line":8,"column":64,"nodeType":"172","messageId":"173","endLine":8,"endColumn":74},{"ruleId":"170","severity":1,"message":"193","line":16,"column":8,"nodeType":"172","messageId":"173","endLine":16,"endColumn":13},{"ruleId":"170","severity":1,"message":"194","line":21,"column":9,"nodeType":"172","messageId":"173","endLine":21,"endColumn":17},{"ruleId":"170","severity":1,"message":"195","line":4,"column":70,"nodeType":"172","messageId":"173","endLine":4,"endColumn":77},{"ruleId":"170","severity":1,"message":"196","line":14,"column":9,"nodeType":"172","messageId":"173","endLine":14,"endColumn":17},{"ruleId":"175","severity":1,"message":"185","line":40,"column":8,"nodeType":"177","endLine":40,"endColumn":10,"suggestions":"197"},{"ruleId":"198","severity":1,"message":"199","line":149,"column":30,"nodeType":"200","endLine":149,"endColumn":76},{"ruleId":"170","severity":1,"message":"194","line":21,"column":9,"nodeType":"172","messageId":"173","endLine":21,"endColumn":17},{"ruleId":"170","severity":1,"message":"201","line":22,"column":12,"nodeType":"172","messageId":"173","endLine":22,"endColumn":17},{"ruleId":"170","severity":1,"message":"202","line":23,"column":12,"nodeType":"172","messageId":"173","endLine":23,"endColumn":23},{"ruleId":"170","severity":1,"message":"203","line":23,"column":25,"nodeType":"172","messageId":"173","endLine":23,"endColumn":39},{"ruleId":"175","severity":1,"message":"185","line":43,"column":8,"nodeType":"177","endLine":43,"endColumn":10,"suggestions":"204"},"no-unused-vars","'logout' is defined but never used.","Identifier","unusedVar","'isAuth' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["205"],"'response' is assigned a value but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","'TagsBlock' is defined but never used.","'CommentsBlock' is defined but never used.","'handleTransferButtonClick' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["206"],"'useEffect' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'ListItemAvatar' is defined but never used.","'Avatar' is defined but never used.","'Typography' is defined but never used.","'axios' is defined but never used.","'setError' is assigned a value but never used.","'Divider' is defined but never used.","'UserInfo' is defined but never used.",["207"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'error' is assigned a value but never used.","'createdMenu' is assigned a value but never used.","'setCreatedMenu' is assigned a value but never used.",["208"],{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},{"desc":"211","fix":"213"},{"desc":"211","fix":"214"},"Update the dependencies array to be: [dispatch]",{"range":"215","text":"216"},"Update the dependencies array to be: [id]",{"range":"217","text":"218"},{"range":"219","text":"218"},{"range":"220","text":"218"},[598,600],"[dispatch]",[837,839],"[id]",[1444,1446],[1544,1546]]