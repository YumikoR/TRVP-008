{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { useButton } from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport { ListActionTypes, useList } from '../useList';\nimport { defaultOptionStringifier } from './defaultOptionStringifier';\nimport { useCompoundParent } from '../useCompound';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nimport { selectReducer } from './selectReducer';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps'; // visually hidden style based on https://webaim.org/techniques/css/invisiblecontent/\n\nconst visuallyHiddenStyle = {\n  clip: 'rect(1px, 1px, 1px, 1px)',\n  clipPath: 'inset(50%)',\n  height: '1px',\n  width: '1px',\n  margin: '-1px',\n  overflow: 'hidden',\n  padding: 0,\n  position: 'absolute',\n  left: '50%',\n  bottom: 0 // to display the native browser validation error at the bottom of the Select.\n\n};\n\nfunction defaultFormValueProvider(selectedOption) {\n  if (Array.isArray(selectedOption)) {\n    if (selectedOption.length === 0) {\n      return '';\n    }\n\n    return JSON.stringify(selectedOption.map(o => o.value));\n  }\n\n  if ((selectedOption == null ? void 0 : selectedOption.value) == null) {\n    return '';\n  }\n\n  if (typeof selectedOption.value === 'string' || typeof selectedOption.value === 'number') {\n    return selectedOption.value;\n  }\n\n  return JSON.stringify(selectedOption.value);\n}\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base-ui/react-select/hooks-api/#use-select)\n */\n\n\nfunction useSelect(props) {\n  const {\n    areOptionsEqual,\n    buttonRef: buttonRefProp,\n    defaultOpen = false,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    name,\n    required,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open: openProp,\n    options: optionsParam,\n    getOptionAsString = defaultOptionStringifier,\n    getSerializedValue = defaultFormValueProvider,\n    value: valueProp,\n    componentName = 'useSelect'\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    if (multiple) {\n      defaultValue = defaultValueProp;\n    } else {\n      defaultValue = defaultValueProp == null ? [] : [defaultValueProp];\n    }\n  }\n\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      if (multiple) {\n        return valueProp;\n      }\n\n      return valueProp == null ? [] : [valueProp];\n    }\n\n    return undefined;\n  }, [valueProp, multiple]);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const options = React.useMemo(() => {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map((option, index) => [option.value, {\n        value: option.value,\n        label: option.label,\n        disabled: option.disabled,\n        ref: /*#__PURE__*/React.createRef(),\n        id: `${listboxId}_${index}`\n      }]));\n    }\n\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible,\n    rootRef: mergedButtonRef\n  } = useButton({\n    disabled,\n    rootRef: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => Array.from(options.keys()), [options]);\n  const getOptionByValue = React.useCallback(valueToGet => {\n    // This can't be simply `options.get(valueToGet)` because of the `areOptionsEqual` prop.\n    // If it's provided, we assume that the user wants to compare the options by value.\n    if (areOptionsEqual !== undefined) {\n      const similarValue = optionValues.find(optionValue => areOptionsEqual(optionValue, valueToGet));\n      return options.get(similarValue);\n    }\n\n    return options.get(valueToGet);\n  }, [options, areOptionsEqual, optionValues]);\n  const isItemDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n\n    const option = getOptionByValue(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [getOptionByValue]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = getOptionByValue(valueToCheck);\n\n    if (!option) {\n      return '';\n    }\n\n    return getOptionAsString(option);\n  }, [getOptionByValue, getOptionAsString]);\n  const controlledState = React.useMemo(() => ({\n    selectedValues: value,\n    open: openProp\n  }), [value, openProp]);\n  const getItemId = React.useCallback(itemValue => {\n    var _options$get;\n\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\n  }, [options]);\n  const handleSelectionChange = React.useCallback((event, newValues) => {\n    if (multiple) {\n      onChange == null || onChange(event, newValues);\n    } else {\n      var _newValues$;\n\n      onChange == null || onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n    }\n  }, [multiple, onChange]);\n  const handleHighlightChange = React.useCallback((event, newValue) => {\n    onHighlightChange == null || onHighlightChange(event, newValue != null ? newValue : null);\n  }, [onHighlightChange]);\n  const handleStateChange = React.useCallback((event, field, fieldValue) => {\n    if (field === 'open') {\n      onOpenChange == null || onOpenChange(fieldValue);\n\n      if (fieldValue === false && (event == null ? void 0 : event.type) !== 'blur') {\n        var _buttonRef$current;\n\n        (_buttonRef$current = buttonRef.current) == null || _buttonRef$current.focus();\n      }\n    }\n  }, [onOpenChange]);\n  const getItemDomElement = React.useCallback(itemId => {\n    var _subitems$get$ref$cur, _subitems$get;\n\n    if (itemId == null) {\n      return null;\n    }\n\n    return (_subitems$get$ref$cur = (_subitems$get = subitems.get(itemId)) == null ? void 0 : _subitems$get.ref.current) != null ? _subitems$get$ref$cur : null;\n  }, [subitems]);\n  const useListParameters = {\n    getInitialState: () => {\n      var _defaultValue;\n\n      return {\n        highlightedValue: null,\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\n        open: defaultOpen\n      };\n    },\n    getItemId,\n    controlledProps: controlledState,\n    focusManagement: 'DOM',\n    getItemDomElement,\n    itemComparer: areOptionsEqual,\n    isItemDisabled,\n    rootRef: handleListboxRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(() => ({\n      multiple\n    }), [multiple]),\n    items: optionValues,\n    getItemAsString: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer,\n    componentName\n  };\n  const {\n    dispatch,\n    getRootProps: getListboxRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue: highlightedOption,\n      selectedValues: selectedOptions\n    },\n    rootRef: mergedListRootRef\n  } = useList(useListParameters); // store the initial open state to prevent focus stealing\n  // (the first option gets focused only when the select is opened by the user)\n\n  const isInitiallyOpen = React.useRef(open);\n  useEnhancedEffect(() => {\n    if (open && highlightedOption !== null) {\n      var _getOptionByValue;\n\n      const optionRef = (_getOptionByValue = getOptionByValue(highlightedOption)) == null ? void 0 : _getOptionByValue.ref;\n\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\n        return;\n      }\n\n      if (!isInitiallyOpen.current) {\n        optionRef.current.focus({\n          preventScroll: true\n        });\n      }\n\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [open, highlightedOption, getOptionByValue]);\n  const getOptionMetadata = React.useCallback(optionValue => getOptionByValue(optionValue), [getOptionByValue]);\n\n  const createHandleButtonClick = externalEventHandlers => event => {\n    var _externalEventHandler;\n\n    externalEventHandlers == null || (_externalEventHandler = externalEventHandlers.onClick) == null || _externalEventHandler.call(externalEventHandlers, event);\n\n    if (!event.defaultMuiPrevented) {\n      const action = {\n        type: SelectActionTypes.buttonClick,\n        event\n      };\n      dispatch(action);\n    }\n  };\n\n  const createHandleButtonKeyDown = otherHandlers => event => {\n    var _otherHandlers$onKeyD;\n\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      dispatch({\n        type: ListActionTypes.keyDown,\n        key: event.key,\n        event\n      });\n    }\n  };\n\n  const getButtonOwnRootProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      onClick: createHandleButtonClick(otherHandlers),\n      onKeyDown: createHandleButtonKeyDown(otherHandlers)\n    };\n  };\n\n  const getSelectTriggerProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, otherHandlers, getButtonOwnRootProps(otherHandlers), {\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-controls': listboxId\n    });\n  };\n\n  const getButtonProps = function () {\n    let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const combinedProps = combineHooksSlotProps(getButtonRootProps, getSelectTriggerProps);\n    return _extends({}, externalProps, combinedProps(externalEventHandlers));\n  };\n\n  const createListboxHandleBlur = otherHandlers => event => {\n    var _otherHandlers$onBlur, _listboxRef$current;\n\n    (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    if ((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(event.relatedTarget) || event.relatedTarget === buttonRef.current) {\n      event.defaultMuiPrevented = true;\n    }\n  };\n\n  const getOwnListboxHandlers = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      onBlur: createListboxHandleBlur(otherHandlers)\n    };\n  };\n\n  const getListboxProps = function () {\n    let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const getCombinedRootProps = combineHooksSlotProps(getOwnListboxHandlers, getListboxRootProps);\n    return _extends({\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined\n    }, externalProps, getCombinedRootProps(externalEventHandlers));\n  };\n\n  React.useDebugValue({\n    selectedOptions,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => _extends({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);\n  let selectValue;\n\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n\n  let selectedOptionsMetadata;\n\n  if (multiple) {\n    selectedOptionsMetadata = selectValue.map(v => getOptionMetadata(v)).filter(o => o !== undefined);\n  } else {\n    var _getOptionMetadata;\n\n    selectedOptionsMetadata = (_getOptionMetadata = getOptionMetadata(selectValue)) != null ? _getOptionMetadata : null;\n  }\n\n  const createHandleHiddenInputChange = externalEventHandlers => event => {\n    var _externalEventHandler2;\n\n    externalEventHandlers == null || (_externalEventHandler2 = externalEventHandlers.onChange) == null || _externalEventHandler2.call(externalEventHandlers, event);\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    const option = options.get(event.target.value); // support autofill\n\n    if (event.target.value === '') {\n      dispatch({\n        type: ListActionTypes.clearSelection\n      });\n    } else if (option !== undefined) {\n      dispatch({\n        type: SelectActionTypes.browserAutoFill,\n        item: option.value,\n        event\n      });\n    }\n  };\n\n  const getHiddenInputProps = function () {\n    let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    return _extends({\n      name,\n      tabIndex: -1,\n      'aria-hidden': true,\n      required: required ? true : undefined,\n      value: getSerializedValue(selectedOptionsMetadata),\n      style: visuallyHiddenStyle\n    }, externalProps, {\n      onChange: createHandleHiddenInputChange(externalEventHandlers)\n    });\n  };\n\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue,\n    disabled,\n    dispatch,\n    getButtonProps,\n    getHiddenInputProps,\n    getListboxProps,\n    getOptionMetadata,\n    listboxRef: mergedListRootRef,\n    open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption\n  };\n}\n\nexport { useSelect };","map":{"version":3,"names":["_extends","React","unstable_useForkRef","useForkRef","unstable_useId","useId","unstable_useEnhancedEffect","useEnhancedEffect","useButton","SelectActionTypes","ListActionTypes","useList","defaultOptionStringifier","useCompoundParent","extractEventHandlers","selectReducer","combineHooksSlotProps","visuallyHiddenStyle","clip","clipPath","height","width","margin","overflow","padding","position","left","bottom","defaultFormValueProvider","selectedOption","Array","isArray","length","JSON","stringify","map","o","value","useSelect","props","areOptionsEqual","buttonRef","buttonRefProp","defaultOpen","defaultValue","defaultValueProp","disabled","listboxId","listboxIdProp","listboxRef","listboxRefProp","multiple","name","required","onChange","onHighlightChange","onOpenChange","open","openProp","options","optionsParam","getOptionAsString","getSerializedValue","valueProp","componentName","useRef","handleButtonRef","undefined","useMemo","subitems","contextValue","compoundComponentContextValue","Map","option","index","label","ref","createRef","id","handleListboxRef","getRootProps","getButtonRootProps","active","buttonActive","focusVisible","buttonFocusVisible","rootRef","mergedButtonRef","optionValues","from","keys","getOptionByValue","useCallback","valueToGet","similarValue","find","optionValue","get","isItemDisabled","valueToCheck","_option$disabled","stringifyOption","controlledState","selectedValues","getItemId","itemValue","_options$get","handleSelectionChange","event","newValues","_newValues$","handleHighlightChange","newValue","handleStateChange","field","fieldValue","type","_buttonRef$current","current","focus","getItemDomElement","itemId","_subitems$get$ref$cur","_subitems$get","useListParameters","getInitialState","_defaultValue","highlightedValue","controlledProps","focusManagement","itemComparer","onStateChange","reducerActionContext","items","getItemAsString","selectionMode","stateReducer","dispatch","getListboxRootProps","listContextValue","state","highlightedOption","selectedOptions","mergedListRootRef","isInitiallyOpen","_getOptionByValue","optionRef","preventScroll","listboxClientRect","getBoundingClientRect","optionClientRect","top","scrollTop","getOptionMetadata","createHandleButtonClick","externalEventHandlers","_externalEventHandler","onClick","call","defaultMuiPrevented","action","buttonClick","createHandleButtonKeyDown","otherHandlers","_otherHandlers$onKeyD","onKeyDown","key","preventDefault","keyDown","getButtonOwnRootProps","getSelectTriggerProps","role","getButtonProps","externalProps","combinedProps","createListboxHandleBlur","_otherHandlers$onBlur","_listboxRef$current","onBlur","contains","relatedTarget","getOwnListboxHandlers","getListboxProps","getCombinedRootProps","useDebugValue","selectValue","selectedOptionsMetadata","v","filter","_getOptionMetadata","createHandleHiddenInputChange","_externalEventHandler2","target","clearSelection","browserAutoFill","item","getHiddenInputProps","tabIndex","style"],"sources":["C:/Users/admin/PycharmProjects/dz_trvp/trvp_dz/frontend/node_modules/@mui/base/useSelect/useSelect.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { useButton } from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport { ListActionTypes, useList } from '../useList';\nimport { defaultOptionStringifier } from './defaultOptionStringifier';\nimport { useCompoundParent } from '../useCompound';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nimport { selectReducer } from './selectReducer';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\n// visually hidden style based on https://webaim.org/techniques/css/invisiblecontent/\nconst visuallyHiddenStyle = {\n  clip: 'rect(1px, 1px, 1px, 1px)',\n  clipPath: 'inset(50%)',\n  height: '1px',\n  width: '1px',\n  margin: '-1px',\n  overflow: 'hidden',\n  padding: 0,\n  position: 'absolute',\n  left: '50%',\n  bottom: 0 // to display the native browser validation error at the bottom of the Select.\n};\nfunction defaultFormValueProvider(selectedOption) {\n  if (Array.isArray(selectedOption)) {\n    if (selectedOption.length === 0) {\n      return '';\n    }\n    return JSON.stringify(selectedOption.map(o => o.value));\n  }\n  if ((selectedOption == null ? void 0 : selectedOption.value) == null) {\n    return '';\n  }\n  if (typeof selectedOption.value === 'string' || typeof selectedOption.value === 'number') {\n    return selectedOption.value;\n  }\n  return JSON.stringify(selectedOption.value);\n}\n\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base-ui/react-select/hooks-api/#use-select)\n */\nfunction useSelect(props) {\n  const {\n    areOptionsEqual,\n    buttonRef: buttonRefProp,\n    defaultOpen = false,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    name,\n    required,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open: openProp,\n    options: optionsParam,\n    getOptionAsString = defaultOptionStringifier,\n    getSerializedValue = defaultFormValueProvider,\n    value: valueProp,\n    componentName = 'useSelect'\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    if (multiple) {\n      defaultValue = defaultValueProp;\n    } else {\n      defaultValue = defaultValueProp == null ? [] : [defaultValueProp];\n    }\n  }\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      if (multiple) {\n        return valueProp;\n      }\n      return valueProp == null ? [] : [valueProp];\n    }\n    return undefined;\n  }, [valueProp, multiple]);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const options = React.useMemo(() => {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map((option, index) => [option.value, {\n        value: option.value,\n        label: option.label,\n        disabled: option.disabled,\n        ref: /*#__PURE__*/React.createRef(),\n        id: `${listboxId}_${index}`\n      }]));\n    }\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible,\n    rootRef: mergedButtonRef\n  } = useButton({\n    disabled,\n    rootRef: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => Array.from(options.keys()), [options]);\n  const getOptionByValue = React.useCallback(valueToGet => {\n    // This can't be simply `options.get(valueToGet)` because of the `areOptionsEqual` prop.\n    // If it's provided, we assume that the user wants to compare the options by value.\n    if (areOptionsEqual !== undefined) {\n      const similarValue = optionValues.find(optionValue => areOptionsEqual(optionValue, valueToGet));\n      return options.get(similarValue);\n    }\n    return options.get(valueToGet);\n  }, [options, areOptionsEqual, optionValues]);\n  const isItemDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n    const option = getOptionByValue(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [getOptionByValue]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = getOptionByValue(valueToCheck);\n    if (!option) {\n      return '';\n    }\n    return getOptionAsString(option);\n  }, [getOptionByValue, getOptionAsString]);\n  const controlledState = React.useMemo(() => ({\n    selectedValues: value,\n    open: openProp\n  }), [value, openProp]);\n  const getItemId = React.useCallback(itemValue => {\n    var _options$get;\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\n  }, [options]);\n  const handleSelectionChange = React.useCallback((event, newValues) => {\n    if (multiple) {\n      onChange == null || onChange(event, newValues);\n    } else {\n      var _newValues$;\n      onChange == null || onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n    }\n  }, [multiple, onChange]);\n  const handleHighlightChange = React.useCallback((event, newValue) => {\n    onHighlightChange == null || onHighlightChange(event, newValue != null ? newValue : null);\n  }, [onHighlightChange]);\n  const handleStateChange = React.useCallback((event, field, fieldValue) => {\n    if (field === 'open') {\n      onOpenChange == null || onOpenChange(fieldValue);\n      if (fieldValue === false && (event == null ? void 0 : event.type) !== 'blur') {\n        var _buttonRef$current;\n        (_buttonRef$current = buttonRef.current) == null || _buttonRef$current.focus();\n      }\n    }\n  }, [onOpenChange]);\n  const getItemDomElement = React.useCallback(itemId => {\n    var _subitems$get$ref$cur, _subitems$get;\n    if (itemId == null) {\n      return null;\n    }\n    return (_subitems$get$ref$cur = (_subitems$get = subitems.get(itemId)) == null ? void 0 : _subitems$get.ref.current) != null ? _subitems$get$ref$cur : null;\n  }, [subitems]);\n  const useListParameters = {\n    getInitialState: () => {\n      var _defaultValue;\n      return {\n        highlightedValue: null,\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\n        open: defaultOpen\n      };\n    },\n    getItemId,\n    controlledProps: controlledState,\n    focusManagement: 'DOM',\n    getItemDomElement,\n    itemComparer: areOptionsEqual,\n    isItemDisabled,\n    rootRef: handleListboxRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(() => ({\n      multiple\n    }), [multiple]),\n    items: optionValues,\n    getItemAsString: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer,\n    componentName\n  };\n  const {\n    dispatch,\n    getRootProps: getListboxRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue: highlightedOption,\n      selectedValues: selectedOptions\n    },\n    rootRef: mergedListRootRef\n  } = useList(useListParameters);\n\n  // store the initial open state to prevent focus stealing\n  // (the first option gets focused only when the select is opened by the user)\n  const isInitiallyOpen = React.useRef(open);\n  useEnhancedEffect(() => {\n    if (open && highlightedOption !== null) {\n      var _getOptionByValue;\n      const optionRef = (_getOptionByValue = getOptionByValue(highlightedOption)) == null ? void 0 : _getOptionByValue.ref;\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\n        return;\n      }\n      if (!isInitiallyOpen.current) {\n        optionRef.current.focus({\n          preventScroll: true\n        });\n      }\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [open, highlightedOption, getOptionByValue]);\n  const getOptionMetadata = React.useCallback(optionValue => getOptionByValue(optionValue), [getOptionByValue]);\n  const createHandleButtonClick = externalEventHandlers => event => {\n    var _externalEventHandler;\n    externalEventHandlers == null || (_externalEventHandler = externalEventHandlers.onClick) == null || _externalEventHandler.call(externalEventHandlers, event);\n    if (!event.defaultMuiPrevented) {\n      const action = {\n        type: SelectActionTypes.buttonClick,\n        event\n      };\n      dispatch(action);\n    }\n  };\n  const createHandleButtonKeyDown = otherHandlers => event => {\n    var _otherHandlers$onKeyD;\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      dispatch({\n        type: ListActionTypes.keyDown,\n        key: event.key,\n        event\n      });\n    }\n  };\n  const getButtonOwnRootProps = (otherHandlers = {}) => ({\n    onClick: createHandleButtonClick(otherHandlers),\n    onKeyDown: createHandleButtonKeyDown(otherHandlers)\n  });\n  const getSelectTriggerProps = (otherHandlers = {}) => {\n    return _extends({}, otherHandlers, getButtonOwnRootProps(otherHandlers), {\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-controls': listboxId\n    });\n  };\n  const getButtonProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const combinedProps = combineHooksSlotProps(getButtonRootProps, getSelectTriggerProps);\n    return _extends({}, externalProps, combinedProps(externalEventHandlers));\n  };\n  const createListboxHandleBlur = otherHandlers => event => {\n    var _otherHandlers$onBlur, _listboxRef$current;\n    (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if ((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(event.relatedTarget) || event.relatedTarget === buttonRef.current) {\n      event.defaultMuiPrevented = true;\n    }\n  };\n  const getOwnListboxHandlers = (otherHandlers = {}) => ({\n    onBlur: createListboxHandleBlur(otherHandlers)\n  });\n  const getListboxProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const getCombinedRootProps = combineHooksSlotProps(getOwnListboxHandlers, getListboxRootProps);\n    return _extends({\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined\n    }, externalProps, getCombinedRootProps(externalEventHandlers));\n  };\n  React.useDebugValue({\n    selectedOptions,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => _extends({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);\n  let selectValue;\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n  let selectedOptionsMetadata;\n  if (multiple) {\n    selectedOptionsMetadata = selectValue.map(v => getOptionMetadata(v)).filter(o => o !== undefined);\n  } else {\n    var _getOptionMetadata;\n    selectedOptionsMetadata = (_getOptionMetadata = getOptionMetadata(selectValue)) != null ? _getOptionMetadata : null;\n  }\n  const createHandleHiddenInputChange = externalEventHandlers => event => {\n    var _externalEventHandler2;\n    externalEventHandlers == null || (_externalEventHandler2 = externalEventHandlers.onChange) == null || _externalEventHandler2.call(externalEventHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    const option = options.get(event.target.value);\n\n    // support autofill\n    if (event.target.value === '') {\n      dispatch({\n        type: ListActionTypes.clearSelection\n      });\n    } else if (option !== undefined) {\n      dispatch({\n        type: SelectActionTypes.browserAutoFill,\n        item: option.value,\n        event\n      });\n    }\n  };\n  const getHiddenInputProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    return _extends({\n      name,\n      tabIndex: -1,\n      'aria-hidden': true,\n      required: required ? true : undefined,\n      value: getSerializedValue(selectedOptionsMetadata),\n      style: visuallyHiddenStyle\n    }, externalProps, {\n      onChange: createHandleHiddenInputChange(externalEventHandlers)\n    });\n  };\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue,\n    disabled,\n    dispatch,\n    getButtonProps,\n    getHiddenInputProps,\n    getListboxProps,\n    getOptionMetadata,\n    listboxRef: mergedListRootRef,\n    open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption\n  };\n}\nexport { useSelect };"],"mappings":"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"},"metadata":{},"sourceType":"module"}